# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: beescheduler # NOTE: update this with your service name

frameworkVersion: "=1.9.0"

provider:
  name: aws
  runtime: nodejs4.3
  region: us-west-2
  timeout: 10
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Scan"
        - "dynamodb:DescribeTable"
      Resource: "arn:aws:dynamodb:*:*:table/users-${self:custom.stage}"
    - Effect: "Allow"
      Action: "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:*:*:function:*"
    - Effect: "Allow"
      Action: "s3:PutObject"
      Resource: "arn:aws:s3:::beescheduler-${self:custom.stage}-ddb-backup/*"
  environment:
    SLS_STAGE: ${self:custom.stage}

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
package:
  exclude:
    - "node_modules/dynamodb-localhost/**"

functions:
  setsched:
    handler: handler.setsched
  queueSetScheds:
    handler: handler.queueSetScheds
    events:
      - schedule: rate(1 day)
  getGoalSlugs:
    handler: handler.getGoalSlugs
    events:
      - http:
          path: "/getGoalSlugs"
          method: get
  getStoredGoals:
    handler: handler.getStoredGoalsHTTP
    events:
      - http:
          path: "/storedGoals"
          method: get
  setGoalSchedule:
    handler: handler.setGoalSchedule
    events:
      - http:
          path: "/storedGoals"
          method: post
  backupDDB:
    handler: handler.backupDDB
    events:
      - schedule: rate(6 hours)
    timeout: 300
  jsonstring:
    handler: handler.jsonstring
    events:
      - http:
          path: "/jsonstring"
          method: get

#    you can add any of the following events
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic

# you can add CloudFormation resource templates here
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users-${self:custom.stage}
        AttributeDefinitions:
          # It's schemaless, so the only thing that needs to be specified here
          # is the partition key.
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      inMemory: true
      migrate: true
      port: 8000
      seed: true
    seed:
      users:
        sources:
          - table: users-${self:custom.stage}
            sources: [./usersSeed.json]
  serverless-offline:
    httpsProtocol: "dev-certs"
    port: 4000
  stage: ${opt:stage, self:provider.stage}
